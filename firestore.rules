rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUserData() {
      return request.resource.data.keys().hasAll(['username', 'email', 'createdAt']) &&
             request.resource.data.username is string &&
             request.resource.data.email is string &&
             request.resource.data.username.size() >= 3 &&
             request.resource.data.username.size() <= 30 &&
             request.resource.data.email.matches('.*@.*\\..*');
    }
    
    function isValidUserUpdate() {
      // Allow updates to specific fields only
      let allowedFields = ['username', 'avatar', 'xp', 'totalXp', 'level', 'stats', 'achievements', 'lastActive', 'updatedAt'];
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedFields);
    }
    
    // User documents - users can only access their own data
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId) && isValidUserData();
      allow update: if isOwner(userId) && isValidUserUpdate();
      allow delete: if false; // Prevent user deletion through client
    }
    
    // Public leaderboard data - read-only for users
    match /leaderboard/{document} {
      allow read: if true; // Public read access
      allow write: if false; // Only server/admin can write
    }
    
    // Tutorial progress - users can only access their own progress
    match /progress/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // User achievements - users can only access their own achievements
    match /achievements/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Challenge submissions - users can only access their own submissions
    match /submissions/{submissionId} {
      allow read, write: if isAuthenticated() && 
                          request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                    request.auth.uid == request.resource.data.userId;
    }
    
    // Public challenge data - read-only for users
    match /challenges/{challengeId} {
      allow read: if true; // Public read access
      allow write: if false; // Only admin can modify challenges
    }
    
    // Public tutorial data - read-only for users
    match /tutorials/{tutorialId} {
      allow read: if true; // Public read access
      allow write: if false; // Only admin can modify tutorials
    }
    
    // Analytics and usage data - write-only for authenticated users
    match /analytics/{document=**} {
      allow read: if false; // No client read access
      allow write: if isAuthenticated(); // Users can log their own analytics
    }
    
    // Feedback and support tickets
    match /feedback/{ticketId} {
      allow read: if isAuthenticated() && 
                  request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                    request.auth.uid == request.resource.data.userId;
      allow update: if false; // Only admin can update tickets
    }
    
    // System configuration - read-only for users
    match /config/{document} {
      allow read: if true; // Public read access for app config
      allow write: if false; // Only admin can modify config
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
